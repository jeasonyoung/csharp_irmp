//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本:2.0.50727.5446
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.ComponentModel;
using System.Diagnostics;
using System.Web.Services;
using System.Web.Services.Protocols;
using System.Xml.Serialization;

// 
// 此源代码由 wsdl 自动生成, Version=2.0.50727.3038。
// 

namespace iPower.IRMP.SSOClient
{

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name = "单点登录服务。Soap", Namespace = "http://ipower.org/")]
    internal partial class SSOServicePoxy : System.Web.Services.Protocols.SoapHttpClientProtocol
    {

        private CredentialSoapHeader credentialSoapHeaderValueField;

        private System.Threading.SendOrPostCallback SignInOperationCompleted;

        private System.Threading.SendOrPostCallback TicketVerificationOperationCompleted;

        private System.Threading.SendOrPostCallback SignOutOperationCompleted;

        private System.Threading.SendOrPostCallback ChangePasswordOperationCompleted;

        private System.Threading.SendOrPostCallback UserAuthorizationVerificationOperationCompleted;

        /// <remarks/>
        public SSOServicePoxy()
        {
            this.Url = "http://sso.yaesoft.net/service.asmx";
        }

        public CredentialSoapHeader CredentialSoapHeaderValue
        {
            get
            {
                return this.credentialSoapHeaderValueField;
            }
            set
            {
                this.credentialSoapHeaderValueField = value;
            }
        }

        /// <remarks/>
        public event SignInCompletedEventHandler SignInCompleted;

        /// <remarks/>
        public event TicketVerificationCompletedEventHandler TicketVerificationCompleted;

        /// <remarks/>
        public event SignOutCompletedEventHandler SignOutCompleted;

        /// <remarks/>
        public event ChangePasswordCompletedEventHandler ChangePasswordCompleted;

        /// <remarks/>
        public event UserAuthorizationVerificationCompletedEventHandler UserAuthorizationVerificationCompleted;

        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("CredentialSoapHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ipower.org/SignIn", 
            RequestNamespace = "http://ipower.org/", 
            ResponseNamespace = "http://ipower.org/", 
            Use = System.Web.Services.Description.SoapBindingUse.Literal, 
            ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public SSOCallResult SignIn(string userSign, string password)
        {
            object[] results = this.Invoke("SignIn", new object[] {
                    userSign,
                    password});
            return ((SSOCallResult)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginSignIn(string userSign, string password, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("SignIn", new object[] {
                    userSign,
                    password}, callback, asyncState);
        }

        /// <remarks/>
        public SSOCallResult EndSignIn(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((SSOCallResult)(results[0]));
        }

        /// <remarks/>
        public void SignInAsync(string userSign, string password)
        {
            this.SignInAsync(userSign, password, null);
        }

        /// <remarks/>
        public void SignInAsync(string userSign, string password, object userState)
        {
            if ((this.SignInOperationCompleted == null))
            {
                this.SignInOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSignInOperationCompleted);
            }
            this.InvokeAsync("SignIn", new object[] {
                    userSign,
                    password}, this.SignInOperationCompleted, userState);
        }

        private void OnSignInOperationCompleted(object arg)
        {
            if ((this.SignInCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SignInCompleted(this, new SignInCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("CredentialSoapHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ipower.org/TicketVerification", RequestNamespace = "http://ipower.org/", ResponseNamespace = "http://ipower.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public SSOCallResult TicketVerification(string ticket)
        {
            object[] results = this.Invoke("TicketVerification", new object[] {
                    ticket});
            return ((SSOCallResult)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginTicketVerification(string ticket, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("TicketVerification", new object[] {
                    ticket}, callback, asyncState);
        }

        /// <remarks/>
        public SSOCallResult EndTicketVerification(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((SSOCallResult)(results[0]));
        }

        /// <remarks/>
        public void TicketVerificationAsync(string ticket)
        {
            this.TicketVerificationAsync(ticket, null);
        }

        /// <remarks/>
        public void TicketVerificationAsync(string ticket, object userState)
        {
            if ((this.TicketVerificationOperationCompleted == null))
            {
                this.TicketVerificationOperationCompleted = new System.Threading.SendOrPostCallback(this.OnTicketVerificationOperationCompleted);
            }
            this.InvokeAsync("TicketVerification", new object[] {
                    ticket}, this.TicketVerificationOperationCompleted, userState);
        }

        private void OnTicketVerificationOperationCompleted(object arg)
        {
            if ((this.TicketVerificationCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.TicketVerificationCompleted(this, new TicketVerificationCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("CredentialSoapHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ipower.org/SignOut", RequestNamespace = "http://ipower.org/", ResponseNamespace = "http://ipower.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public SSOCallResult SignOut(string ticket)
        {
            object[] results = this.Invoke("SignOut", new object[] {
                    ticket});
            return ((SSOCallResult)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginSignOut(string ticket, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("SignOut", new object[] {
                    ticket}, callback, asyncState);
        }

        /// <remarks/>
        public SSOCallResult EndSignOut(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((SSOCallResult)(results[0]));
        }

        /// <remarks/>
        public void SignOutAsync(string ticket)
        {
            this.SignOutAsync(ticket, null);
        }

        /// <remarks/>
        public void SignOutAsync(string ticket, object userState)
        {
            if ((this.SignOutOperationCompleted == null))
            {
                this.SignOutOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSignOutOperationCompleted);
            }
            this.InvokeAsync("SignOut", new object[] {
                    ticket}, this.SignOutOperationCompleted, userState);
        }

        private void OnSignOutOperationCompleted(object arg)
        {
            if ((this.SignOutCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SignOutCompleted(this, new SignOutCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("CredentialSoapHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ipower.org/ChangePassword", RequestNamespace = "http://ipower.org/", ResponseNamespace = "http://ipower.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public SSOCallResult ChangePassword(string userSign, string oldPassword, string newPassword)
        {
            object[] results = this.Invoke("ChangePassword", new object[] {
                    userSign,
                    oldPassword,
                    newPassword});
            return ((SSOCallResult)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginChangePassword(string userSign, string oldPassword, string newPassword, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("ChangePassword", new object[] {
                    userSign,
                    oldPassword,
                    newPassword}, callback, asyncState);
        }

        /// <remarks/>
        public SSOCallResult EndChangePassword(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((SSOCallResult)(results[0]));
        }

        /// <remarks/>
        public void ChangePasswordAsync(string userSign, string oldPassword, string newPassword)
        {
            this.ChangePasswordAsync(userSign, oldPassword, newPassword, null);
        }

        /// <remarks/>
        public void ChangePasswordAsync(string userSign, string oldPassword, string newPassword, object userState)
        {
            if ((this.ChangePasswordOperationCompleted == null))
            {
                this.ChangePasswordOperationCompleted = new System.Threading.SendOrPostCallback(this.OnChangePasswordOperationCompleted);
            }
            this.InvokeAsync("ChangePassword", new object[] {
                    userSign,
                    oldPassword,
                    newPassword}, this.ChangePasswordOperationCompleted, userState);
        }

        private void OnChangePasswordOperationCompleted(object arg)
        {
            if ((this.ChangePasswordCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ChangePasswordCompleted(this, new ChangePasswordCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("CredentialSoapHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ipower.org/UserAuthorizationVerification", RequestNamespace = "http://ipower.org/", ResponseNamespace = "http://ipower.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public CallResult UserAuthorizationVerification(string employeeID, string systemID, string clientIP)
        {
            object[] results = this.Invoke("UserAuthorizationVerification", new object[] {
                    employeeID,
                    systemID,
                    clientIP});
            return ((CallResult)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginUserAuthorizationVerification(string employeeID, string systemID, string clientIP, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("UserAuthorizationVerification", new object[] {
                    employeeID,
                    systemID,
                    clientIP}, callback, asyncState);
        }

        /// <remarks/>
        public CallResult EndUserAuthorizationVerification(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((CallResult)(results[0]));
        }

        /// <remarks/>
        public void UserAuthorizationVerificationAsync(string employeeID, string systemID, string clientIP)
        {
            this.UserAuthorizationVerificationAsync(employeeID, systemID, clientIP, null);
        }

        /// <remarks/>
        public void UserAuthorizationVerificationAsync(string employeeID, string systemID, string clientIP, object userState)
        {
            if ((this.UserAuthorizationVerificationOperationCompleted == null))
            {
                this.UserAuthorizationVerificationOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUserAuthorizationVerificationOperationCompleted);
            }
            this.InvokeAsync("UserAuthorizationVerification", new object[] {
                    employeeID,
                    systemID,
                    clientIP}, this.UserAuthorizationVerificationOperationCompleted, userState);
        }

        private void OnUserAuthorizationVerificationOperationCompleted(object arg)
        {
            if ((this.UserAuthorizationVerificationCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UserAuthorizationVerificationCompleted(this, new UserAuthorizationVerificationCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        public new void CancelAsync(object userState)
        {
            base.CancelAsync(userState);
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://ipower.org/")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace = "http://ipower.org/", IsNullable = false)]
    public partial class CredentialSoapHeader : System.Web.Services.Protocols.SoapHeader
    {

        private string appSystemIDField;

        private string appSystemPwdField;

        private System.Xml.XmlAttribute[] anyAttrField;

        /// <remarks/>
        public string AppSystemID
        {
            get
            {
                return this.appSystemIDField;
            }
            set
            {
                this.appSystemIDField = value;
            }
        }

        /// <remarks/>
        public string AppSystemPwd
        {
            get
            {
                return this.appSystemPwdField;
            }
            set
            {
                this.appSystemPwdField = value;
            }
        }

        /// <remarks/>
        [System.Xml.Serialization.XmlAnyAttributeAttribute()]
        public System.Xml.XmlAttribute[] AnyAttr
        {
            get
            {
                return this.anyAttrField;
            }
            set
            {
                this.anyAttrField = value;
            }
        }
    }

    /// <remarks/>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(SSOCallResult))]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://ipower.org/")]
    public partial class CallResult
    {

        private int resultCodeField;

        private string resultMessageField;

        /// <remarks/>
        public int ResultCode
        {
            get
            {
                return this.resultCodeField;
            }
            set
            {
                this.resultCodeField = value;
            }
        }

        /// <remarks/>
        public string ResultMessage
        {
            get
            {
                return this.resultMessageField;
            }
            set
            {
                this.resultMessageField = value;
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://ipower.org/")]
    public partial class SSOCallResult : CallResult
    {

        private string ticketField;

        /// <remarks/>
        public string Ticket
        {
            get
            {
                return this.ticketField;
            }
            set
            {
                this.ticketField = value;
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    internal delegate void SignInCompletedEventHandler(object sender, SignInCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    internal partial class SignInCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal SignInCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public SSOCallResult Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((SSOCallResult)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    internal delegate void TicketVerificationCompletedEventHandler(object sender, TicketVerificationCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    internal partial class TicketVerificationCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal TicketVerificationCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public SSOCallResult Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((SSOCallResult)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    internal delegate void SignOutCompletedEventHandler(object sender, SignOutCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    internal partial class SignOutCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal SignOutCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public SSOCallResult Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((SSOCallResult)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    internal delegate void ChangePasswordCompletedEventHandler(object sender, ChangePasswordCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    internal partial class ChangePasswordCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal ChangePasswordCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public SSOCallResult Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((SSOCallResult)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    internal delegate void UserAuthorizationVerificationCompletedEventHandler(object sender, UserAuthorizationVerificationCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    internal partial class UserAuthorizationVerificationCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal UserAuthorizationVerificationCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public CallResult Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((CallResult)(this.results[0]));
            }
        }
    }
}