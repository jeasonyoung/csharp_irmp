//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本:2.0.50727.5446
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.ComponentModel;
using System.Diagnostics;
using System.Web.Services;
using System.Web.Services.Protocols;
using System.Xml.Serialization;

// 
// 此源代码由 wsdl 自动生成, Version=2.0.50727.3038。
// 
namespace iPower.IRMP.Flow.Poxy
{

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name = "流程引擎调用接口Soap", Namespace = "http://ipower.org/")]
    internal partial class FlowServicePoxy : System.Web.Services.Protocols.SoapHttpClientProtocol
    {

        private System.Threading.SendOrPostCallback InitFlowOperationCompleted;

        private System.Threading.SendOrPostCallback CommitFlowInstanceOperationCompleted;

        private System.Threading.SendOrPostCallback CommitFlowOperationCompleted;

        private System.Threading.SendOrPostCallback DestroyFlowOperationCompleted;

        private System.Threading.SendOrPostCallback AuthorizeFlowOperationCompleted;

        private System.Threading.SendOrPostCallback WithdrawFlowOperationCompleted;

        private System.Threading.SendOrPostCallback GetProcessResumesOperationCompleted;

        /// <remarks/>
        public FlowServicePoxy()
        {
            this.Url = "http://irmp.yaesoft.net/flow/FlowService.asmx";
        }

        /// <remarks/>
        public event InitFlowCompletedEventHandler InitFlowCompleted;

        /// <remarks/>
        public event CommitFlowInstanceCompletedEventHandler CommitFlowInstanceCompleted;

        /// <remarks/>
        public event CommitFlowCompletedEventHandler CommitFlowCompleted;

        /// <remarks/>
        public event DestroyFlowCompletedEventHandler DestroyFlowCompleted;

        /// <remarks/>
        public event AuthorizeFlowCompletedEventHandler AuthorizeFlowCompleted;

        /// <remarks/>
        public event WithdrawFlowCompletedEventHandler WithdrawFlowCompleted;

        /// <remarks/>
        public event GetProcessResumesCompletedEventHandler GetProcessResumesCompleted;

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ipower.org/InitFlow", RequestNamespace = "http://ipower.org/", ResponseNamespace = "http://ipower.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool InitFlow(string processSign, string processInstanceName, string employeeID, string employeeName, out string processInstanceID, out string msgError)
        {
            object[] results = this.Invoke("InitFlow", new object[] {
                    processSign,
                    processInstanceName,
                    employeeID,
                    employeeName});
            processInstanceID = ((string)(results[1]));
            msgError = ((string)(results[2]));
            return ((bool)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginInitFlow(string processSign, string processInstanceName, string employeeID, string employeeName, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("InitFlow", new object[] {
                    processSign,
                    processInstanceName,
                    employeeID,
                    employeeName}, callback, asyncState);
        }

        /// <remarks/>
        public bool EndInitFlow(System.IAsyncResult asyncResult, out string processInstanceID, out string msgError)
        {
            object[] results = this.EndInvoke(asyncResult);
            processInstanceID = ((string)(results[1]));
            msgError = ((string)(results[2]));
            return ((bool)(results[0]));
        }

        /// <remarks/>
        public void InitFlowAsync(string processSign, string processInstanceName, string employeeID, string employeeName)
        {
            this.InitFlowAsync(processSign, processInstanceName, employeeID, employeeName, null);
        }

        /// <remarks/>
        public void InitFlowAsync(string processSign, string processInstanceName, string employeeID, string employeeName, object userState)
        {
            if ((this.InitFlowOperationCompleted == null))
            {
                this.InitFlowOperationCompleted = new System.Threading.SendOrPostCallback(this.OnInitFlowOperationCompleted);
            }
            this.InvokeAsync("InitFlow", new object[] {
                    processSign,
                    processInstanceName,
                    employeeID,
                    employeeName}, this.InitFlowOperationCompleted, userState);
        }

        private void OnInitFlowOperationCompleted(object arg)
        {
            if ((this.InitFlowCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.InitFlowCompleted(this, new InitFlowCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ipower.org/CommitFlowInstance", RequestNamespace = "http://ipower.org/", ResponseNamespace = "http://ipower.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool CommitFlowInstance(string processInstanceID, string stepSign, string employeeID, string employeeName, ParamInstance[] parameters, string approvalViews, string taskID, out string msgError)
        {
            object[] results = this.Invoke("CommitFlowInstance", new object[] {
                    processInstanceID,
                    stepSign,
                    employeeID,
                    employeeName,
                    parameters,
                    approvalViews,
                    taskID});
            msgError = ((string)(results[1]));
            return ((bool)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginCommitFlowInstance(string processInstanceID, string stepSign, string employeeID, string employeeName, ParamInstance[] parameters, string approvalViews, string taskID, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("CommitFlowInstance", new object[] {
                    processInstanceID,
                    stepSign,
                    employeeID,
                    employeeName,
                    parameters,
                    approvalViews,
                    taskID}, callback, asyncState);
        }

        /// <remarks/>
        public bool EndCommitFlowInstance(System.IAsyncResult asyncResult, out string msgError)
        {
            object[] results = this.EndInvoke(asyncResult);
            msgError = ((string)(results[1]));
            return ((bool)(results[0]));
        }

        /// <remarks/>
        public void CommitFlowInstanceAsync(string processInstanceID, string stepSign, string employeeID, string employeeName, ParamInstance[] parameters, string approvalViews, string taskID)
        {
            this.CommitFlowInstanceAsync(processInstanceID, stepSign, employeeID, employeeName, parameters, approvalViews, taskID, null);
        }

        /// <remarks/>
        public void CommitFlowInstanceAsync(string processInstanceID, string stepSign, string employeeID, string employeeName, ParamInstance[] parameters, string approvalViews, string taskID, object userState)
        {
            if ((this.CommitFlowInstanceOperationCompleted == null))
            {
                this.CommitFlowInstanceOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCommitFlowInstanceOperationCompleted);
            }
            this.InvokeAsync("CommitFlowInstance", new object[] {
                    processInstanceID,
                    stepSign,
                    employeeID,
                    employeeName,
                    parameters,
                    approvalViews,
                    taskID}, this.CommitFlowInstanceOperationCompleted, userState);
        }

        private void OnCommitFlowInstanceOperationCompleted(object arg)
        {
            if ((this.CommitFlowInstanceCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CommitFlowInstanceCompleted(this, new CommitFlowInstanceCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ipower.org/CommitFlow", RequestNamespace = "http://ipower.org/", ResponseNamespace = "http://ipower.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool CommitFlow(string processInstanceID, string stepSign, string employeeID, string employeeName, ParamInstance[] parameters, string approvalViews, string taskID, [System.Xml.Serialization.XmlArrayItemAttribute("ArrayOfString")] [System.Xml.Serialization.XmlArrayItemAttribute(NestingLevel = 1)] string[][] toDoEmployees, [System.Xml.Serialization.XmlArrayItemAttribute("ArrayOfString")] [System.Xml.Serialization.XmlArrayItemAttribute(NestingLevel = 1)] string[][] toViewEmployees, out string msgError)
        {
            object[] results = this.Invoke("CommitFlow", new object[] {
                    processInstanceID,
                    stepSign,
                    employeeID,
                    employeeName,
                    parameters,
                    approvalViews,
                    taskID,
                    toDoEmployees,
                    toViewEmployees});
            msgError = ((string)(results[1]));
            return ((bool)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginCommitFlow(string processInstanceID, string stepSign, string employeeID, string employeeName, ParamInstance[] parameters, string approvalViews, string taskID, string[][] toDoEmployees, string[][] toViewEmployees, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("CommitFlow", new object[] {
                    processInstanceID,
                    stepSign,
                    employeeID,
                    employeeName,
                    parameters,
                    approvalViews,
                    taskID,
                    toDoEmployees,
                    toViewEmployees}, callback, asyncState);
        }

        /// <remarks/>
        public bool EndCommitFlow(System.IAsyncResult asyncResult, out string msgError)
        {
            object[] results = this.EndInvoke(asyncResult);
            msgError = ((string)(results[1]));
            return ((bool)(results[0]));
        }

        /// <remarks/>
        public void CommitFlowAsync(string processInstanceID, string stepSign, string employeeID, string employeeName, ParamInstance[] parameters, string approvalViews, string taskID, string[][] toDoEmployees, string[][] toViewEmployees)
        {
            this.CommitFlowAsync(processInstanceID, stepSign, employeeID, employeeName, parameters, approvalViews, taskID, toDoEmployees, toViewEmployees, null);
        }

        /// <remarks/>
        public void CommitFlowAsync(string processInstanceID, string stepSign, string employeeID, string employeeName, ParamInstance[] parameters, string approvalViews, string taskID, string[][] toDoEmployees, string[][] toViewEmployees, object userState)
        {
            if ((this.CommitFlowOperationCompleted == null))
            {
                this.CommitFlowOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCommitFlowOperationCompleted);
            }
            this.InvokeAsync("CommitFlow", new object[] {
                    processInstanceID,
                    stepSign,
                    employeeID,
                    employeeName,
                    parameters,
                    approvalViews,
                    taskID,
                    toDoEmployees,
                    toViewEmployees}, this.CommitFlowOperationCompleted, userState);
        }

        private void OnCommitFlowOperationCompleted(object arg)
        {
            if ((this.CommitFlowCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CommitFlowCompleted(this, new CommitFlowCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ipower.org/DestroyFlow", RequestNamespace = "http://ipower.org/", ResponseNamespace = "http://ipower.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool DestroyFlow(string processInstanceID, string employeeID, string employeeName, out string msgError)
        {
            object[] results = this.Invoke("DestroyFlow", new object[] {
                    processInstanceID,
                    employeeID,
                    employeeName});
            msgError = ((string)(results[1]));
            return ((bool)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginDestroyFlow(string processInstanceID, string employeeID, string employeeName, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("DestroyFlow", new object[] {
                    processInstanceID,
                    employeeID,
                    employeeName}, callback, asyncState);
        }

        /// <remarks/>
        public bool EndDestroyFlow(System.IAsyncResult asyncResult, out string msgError)
        {
            object[] results = this.EndInvoke(asyncResult);
            msgError = ((string)(results[1]));
            return ((bool)(results[0]));
        }

        /// <remarks/>
        public void DestroyFlowAsync(string processInstanceID, string employeeID, string employeeName)
        {
            this.DestroyFlowAsync(processInstanceID, employeeID, employeeName, null);
        }

        /// <remarks/>
        public void DestroyFlowAsync(string processInstanceID, string employeeID, string employeeName, object userState)
        {
            if ((this.DestroyFlowOperationCompleted == null))
            {
                this.DestroyFlowOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDestroyFlowOperationCompleted);
            }
            this.InvokeAsync("DestroyFlow", new object[] {
                    processInstanceID,
                    employeeID,
                    employeeName}, this.DestroyFlowOperationCompleted, userState);
        }

        private void OnDestroyFlowOperationCompleted(object arg)
        {
            if ((this.DestroyFlowCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DestroyFlowCompleted(this, new DestroyFlowCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ipower.org/AuthorizeFlow", RequestNamespace = "http://ipower.org/", ResponseNamespace = "http://ipower.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool AuthorizeFlow(string processSign, string employeeID, string employeeName, string[] stepSigns, string toEmployeeID, System.DateTime fromDate, System.DateTime toDate, out string msgError)
        {
            object[] results = this.Invoke("AuthorizeFlow", new object[] {
                    processSign,
                    employeeID,
                    employeeName,
                    stepSigns,
                    toEmployeeID,
                    fromDate,
                    toDate});
            msgError = ((string)(results[1]));
            return ((bool)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginAuthorizeFlow(string processSign, string employeeID, string employeeName, string[] stepSigns, string toEmployeeID, System.DateTime fromDate, System.DateTime toDate, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("AuthorizeFlow", new object[] {
                    processSign,
                    employeeID,
                    employeeName,
                    stepSigns,
                    toEmployeeID,
                    fromDate,
                    toDate}, callback, asyncState);
        }

        /// <remarks/>
        public bool EndAuthorizeFlow(System.IAsyncResult asyncResult, out string msgError)
        {
            object[] results = this.EndInvoke(asyncResult);
            msgError = ((string)(results[1]));
            return ((bool)(results[0]));
        }

        /// <remarks/>
        public void AuthorizeFlowAsync(string processSign, string employeeID, string employeeName, string[] stepSigns, string toEmployeeID, System.DateTime fromDate, System.DateTime toDate)
        {
            this.AuthorizeFlowAsync(processSign, employeeID, employeeName, stepSigns, toEmployeeID, fromDate, toDate, null);
        }

        /// <remarks/>
        public void AuthorizeFlowAsync(string processSign, string employeeID, string employeeName, string[] stepSigns, string toEmployeeID, System.DateTime fromDate, System.DateTime toDate, object userState)
        {
            if ((this.AuthorizeFlowOperationCompleted == null))
            {
                this.AuthorizeFlowOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAuthorizeFlowOperationCompleted);
            }
            this.InvokeAsync("AuthorizeFlow", new object[] {
                    processSign,
                    employeeID,
                    employeeName,
                    stepSigns,
                    toEmployeeID,
                    fromDate,
                    toDate}, this.AuthorizeFlowOperationCompleted, userState);
        }

        private void OnAuthorizeFlowOperationCompleted(object arg)
        {
            if ((this.AuthorizeFlowCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AuthorizeFlowCompleted(this, new AuthorizeFlowCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ipower.org/WithdrawFlow", RequestNamespace = "http://ipower.org/", ResponseNamespace = "http://ipower.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool WithdrawFlow(string processSign, string employeeID, string employeeName, string[] stepSigns, out string msgError)
        {
            object[] results = this.Invoke("WithdrawFlow", new object[] {
                    processSign,
                    employeeID,
                    employeeName,
                    stepSigns});
            msgError = ((string)(results[1]));
            return ((bool)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginWithdrawFlow(string processSign, string employeeID, string employeeName, string[] stepSigns, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("WithdrawFlow", new object[] {
                    processSign,
                    employeeID,
                    employeeName,
                    stepSigns}, callback, asyncState);
        }

        /// <remarks/>
        public bool EndWithdrawFlow(System.IAsyncResult asyncResult, out string msgError)
        {
            object[] results = this.EndInvoke(asyncResult);
            msgError = ((string)(results[1]));
            return ((bool)(results[0]));
        }

        /// <remarks/>
        public void WithdrawFlowAsync(string processSign, string employeeID, string employeeName, string[] stepSigns)
        {
            this.WithdrawFlowAsync(processSign, employeeID, employeeName, stepSigns, null);
        }

        /// <remarks/>
        public void WithdrawFlowAsync(string processSign, string employeeID, string employeeName, string[] stepSigns, object userState)
        {
            if ((this.WithdrawFlowOperationCompleted == null))
            {
                this.WithdrawFlowOperationCompleted = new System.Threading.SendOrPostCallback(this.OnWithdrawFlowOperationCompleted);
            }
            this.InvokeAsync("WithdrawFlow", new object[] {
                    processSign,
                    employeeID,
                    employeeName,
                    stepSigns}, this.WithdrawFlowOperationCompleted, userState);
        }

        private void OnWithdrawFlowOperationCompleted(object arg)
        {
            if ((this.WithdrawFlowCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.WithdrawFlowCompleted(this, new WithdrawFlowCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ipower.org/GetProcessResumes", RequestNamespace = "http://ipower.org/", ResponseNamespace = "http://ipower.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public ProcessResumes[] GetProcessResumes(string processInstanceID, out string msgError)
        {
            object[] results = this.Invoke("GetProcessResumes", new object[] {
                    processInstanceID});
            msgError = ((string)(results[1]));
            return ((ProcessResumes[])(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginGetProcessResumes(string processInstanceID, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("GetProcessResumes", new object[] {
                    processInstanceID}, callback, asyncState);
        }

        /// <remarks/>
        public ProcessResumes[] EndGetProcessResumes(System.IAsyncResult asyncResult, out string msgError)
        {
            object[] results = this.EndInvoke(asyncResult);
            msgError = ((string)(results[1]));
            return ((ProcessResumes[])(results[0]));
        }

        /// <remarks/>
        public void GetProcessResumesAsync(string processInstanceID)
        {
            this.GetProcessResumesAsync(processInstanceID, null);
        }

        /// <remarks/>
        public void GetProcessResumesAsync(string processInstanceID, object userState)
        {
            if ((this.GetProcessResumesOperationCompleted == null))
            {
                this.GetProcessResumesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetProcessResumesOperationCompleted);
            }
            this.InvokeAsync("GetProcessResumes", new object[] {
                    processInstanceID}, this.GetProcessResumesOperationCompleted, userState);
        }

        private void OnGetProcessResumesOperationCompleted(object arg)
        {
            if ((this.GetProcessResumesCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetProcessResumesCompleted(this, new GetProcessResumesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        public new void CancelAsync(object userState)
        {
            base.CancelAsync(userState);
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://ipower.org/")]
    public partial class ParamInstance
    {

        private string paramNameField;

        private string paramValueField;

        /// <remarks/>
        public string ParamName
        {
            get
            {
                return this.paramNameField;
            }
            set
            {
                this.paramNameField = value;
            }
        }

        /// <remarks/>
        public string ParamValue
        {
            get
            {
                return this.paramValueField;
            }
            set
            {
                this.paramValueField = value;
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://ipower.org/")]
    public partial class ProcessResumes
    {

        private string stepInstanceIDField;

        private string stepInstanceNameField;

        private string doEmployeeIDField;

        private string doEmployeeNameField;

        private System.DateTime approvalDateField;

        private string approvalViewsField;

        /// <remarks/>
        public string StepInstanceID
        {
            get
            {
                return this.stepInstanceIDField;
            }
            set
            {
                this.stepInstanceIDField = value;
            }
        }

        /// <remarks/>
        public string StepInstanceName
        {
            get
            {
                return this.stepInstanceNameField;
            }
            set
            {
                this.stepInstanceNameField = value;
            }
        }

        /// <remarks/>
        public string DoEmployeeID
        {
            get
            {
                return this.doEmployeeIDField;
            }
            set
            {
                this.doEmployeeIDField = value;
            }
        }

        /// <remarks/>
        public string DoEmployeeName
        {
            get
            {
                return this.doEmployeeNameField;
            }
            set
            {
                this.doEmployeeNameField = value;
            }
        }

        /// <remarks/>
        public System.DateTime ApprovalDate
        {
            get
            {
                return this.approvalDateField;
            }
            set
            {
                this.approvalDateField = value;
            }
        }

        /// <remarks/>
        public string ApprovalViews
        {
            get
            {
                return this.approvalViewsField;
            }
            set
            {
                this.approvalViewsField = value;
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    internal delegate void InitFlowCompletedEventHandler(object sender, InitFlowCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    internal partial class InitFlowCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal InitFlowCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public bool Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }

        /// <remarks/>
        public string processInstanceID
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }

        /// <remarks/>
        public string msgError
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[2]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    internal delegate void CommitFlowInstanceCompletedEventHandler(object sender, CommitFlowInstanceCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    internal partial class CommitFlowInstanceCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal CommitFlowInstanceCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public bool Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }

        /// <remarks/>
        public string msgError
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    internal delegate void CommitFlowCompletedEventHandler(object sender, CommitFlowCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    internal partial class CommitFlowCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal CommitFlowCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public bool Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }

        /// <remarks/>
        public string msgError
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    internal delegate void DestroyFlowCompletedEventHandler(object sender, DestroyFlowCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    internal partial class DestroyFlowCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal DestroyFlowCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public bool Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }

        /// <remarks/>
        public string msgError
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    internal delegate void AuthorizeFlowCompletedEventHandler(object sender, AuthorizeFlowCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    internal partial class AuthorizeFlowCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal AuthorizeFlowCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public bool Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }

        /// <remarks/>
        public string msgError
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    internal delegate void WithdrawFlowCompletedEventHandler(object sender, WithdrawFlowCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    internal partial class WithdrawFlowCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal WithdrawFlowCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public bool Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }

        /// <remarks/>
        public string msgError
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    internal delegate void GetProcessResumesCompletedEventHandler(object sender, GetProcessResumesCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    internal partial class GetProcessResumesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal GetProcessResumesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public ProcessResumes[] Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((ProcessResumes[])(this.results[0]));
            }
        }

        /// <remarks/>
        public string msgError
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }
}