//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本:2.0.50727.5446
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.ComponentModel;
using System.Diagnostics;
using System.Web.Services;
using System.Web.Services.Protocols;
using System.Xml.Serialization;

// 
// 此源代码由 wsdl 自动生成, Version=2.0.50727.3038。
// 
namespace iPower.IRMP.Flow.Poxy
{

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name = "流程任务服务接口。Soap", Namespace = "http://ipower.org/")]
    internal partial class TaskServicePoxy : System.Web.Services.Protocols.SoapHttpClientProtocol
    {

        private System.Threading.SendOrPostCallback PendingDynamicTextDataOperationCompleted;

        private System.Threading.SendOrPostCallback PendingDataSourceOperationCompleted;

        private System.Threading.SendOrPostCallback BeReadDynamicTextDataOperationCompleted;

        private System.Threading.SendOrPostCallback BeReadDataSourceOperationCompleted;

        /// <remarks/>
        public TaskServicePoxy()
        {
            this.Url = "http://irmp.yaesoft.net/Flow/TaskService.asmx";
        }

        /// <remarks/>
        public event PendingDynamicTextDataCompletedEventHandler PendingDynamicTextDataCompleted;

        /// <remarks/>
        public event PendingDataSourceCompletedEventHandler PendingDataSourceCompleted;

        /// <remarks/>
        public event BeReadDynamicTextDataCompletedEventHandler BeReadDynamicTextDataCompleted;

        /// <remarks/>
        public event BeReadDataSourceCompletedEventHandler BeReadDataSourceCompleted;

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ipower.org/PendingDynamicTextData", RequestNamespace = "http://ipower.org/", ResponseNamespace = "http://ipower.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string PendingDynamicTextData(string employeeID)
        {
            object[] results = this.Invoke("PendingDynamicTextData", new object[] {
                    employeeID});
            return ((string)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginPendingDynamicTextData(string employeeID, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("PendingDynamicTextData", new object[] {
                    employeeID}, callback, asyncState);
        }

        /// <remarks/>
        public string EndPendingDynamicTextData(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }

        /// <remarks/>
        public void PendingDynamicTextDataAsync(string employeeID)
        {
            this.PendingDynamicTextDataAsync(employeeID, null);
        }

        /// <remarks/>
        public void PendingDynamicTextDataAsync(string employeeID, object userState)
        {
            if ((this.PendingDynamicTextDataOperationCompleted == null))
            {
                this.PendingDynamicTextDataOperationCompleted = new System.Threading.SendOrPostCallback(this.OnPendingDynamicTextDataOperationCompleted);
            }
            this.InvokeAsync("PendingDynamicTextData", new object[] {
                    employeeID}, this.PendingDynamicTextDataOperationCompleted, userState);
        }

        private void OnPendingDynamicTextDataOperationCompleted(object arg)
        {
            if ((this.PendingDynamicTextDataCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.PendingDynamicTextDataCompleted(this, new PendingDynamicTextDataCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ipower.org/PendingDataSource", RequestNamespace = "http://ipower.org/", ResponseNamespace = "http://ipower.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public WebPartData[] PendingDataSource(string employeeID, string dataType)
        {
            object[] results = this.Invoke("PendingDataSource", new object[] {
                    employeeID,
                    dataType});
            return ((WebPartData[])(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginPendingDataSource(string employeeID, string dataType, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("PendingDataSource", new object[] {
                    employeeID,
                    dataType}, callback, asyncState);
        }

        /// <remarks/>
        public WebPartData[] EndPendingDataSource(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((WebPartData[])(results[0]));
        }

        /// <remarks/>
        public void PendingDataSourceAsync(string employeeID, string dataType)
        {
            this.PendingDataSourceAsync(employeeID, dataType, null);
        }

        /// <remarks/>
        public void PendingDataSourceAsync(string employeeID, string dataType, object userState)
        {
            if ((this.PendingDataSourceOperationCompleted == null))
            {
                this.PendingDataSourceOperationCompleted = new System.Threading.SendOrPostCallback(this.OnPendingDataSourceOperationCompleted);
            }
            this.InvokeAsync("PendingDataSource", new object[] {
                    employeeID,
                    dataType}, this.PendingDataSourceOperationCompleted, userState);
        }

        private void OnPendingDataSourceOperationCompleted(object arg)
        {
            if ((this.PendingDataSourceCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.PendingDataSourceCompleted(this, new PendingDataSourceCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ipower.org/BeReadDynamicTextData", RequestNamespace = "http://ipower.org/", ResponseNamespace = "http://ipower.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string BeReadDynamicTextData(string employeeID)
        {
            object[] results = this.Invoke("BeReadDynamicTextData", new object[] {
                    employeeID});
            return ((string)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginBeReadDynamicTextData(string employeeID, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("BeReadDynamicTextData", new object[] {
                    employeeID}, callback, asyncState);
        }

        /// <remarks/>
        public string EndBeReadDynamicTextData(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }

        /// <remarks/>
        public void BeReadDynamicTextDataAsync(string employeeID)
        {
            this.BeReadDynamicTextDataAsync(employeeID, null);
        }

        /// <remarks/>
        public void BeReadDynamicTextDataAsync(string employeeID, object userState)
        {
            if ((this.BeReadDynamicTextDataOperationCompleted == null))
            {
                this.BeReadDynamicTextDataOperationCompleted = new System.Threading.SendOrPostCallback(this.OnBeReadDynamicTextDataOperationCompleted);
            }
            this.InvokeAsync("BeReadDynamicTextData", new object[] {
                    employeeID}, this.BeReadDynamicTextDataOperationCompleted, userState);
        }

        private void OnBeReadDynamicTextDataOperationCompleted(object arg)
        {
            if ((this.BeReadDynamicTextDataCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.BeReadDynamicTextDataCompleted(this, new BeReadDynamicTextDataCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ipower.org/BeReadDataSource", RequestNamespace = "http://ipower.org/", ResponseNamespace = "http://ipower.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public WebPartData[] BeReadDataSource(string employeeID, string dataType)
        {
            object[] results = this.Invoke("BeReadDataSource", new object[] {
                    employeeID,
                    dataType});
            return ((WebPartData[])(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginBeReadDataSource(string employeeID, string dataType, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("BeReadDataSource", new object[] {
                    employeeID,
                    dataType}, callback, asyncState);
        }

        /// <remarks/>
        public WebPartData[] EndBeReadDataSource(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((WebPartData[])(results[0]));
        }

        /// <remarks/>
        public void BeReadDataSourceAsync(string employeeID, string dataType)
        {
            this.BeReadDataSourceAsync(employeeID, dataType, null);
        }

        /// <remarks/>
        public void BeReadDataSourceAsync(string employeeID, string dataType, object userState)
        {
            if ((this.BeReadDataSourceOperationCompleted == null))
            {
                this.BeReadDataSourceOperationCompleted = new System.Threading.SendOrPostCallback(this.OnBeReadDataSourceOperationCompleted);
            }
            this.InvokeAsync("BeReadDataSource", new object[] {
                    employeeID,
                    dataType}, this.BeReadDataSourceOperationCompleted, userState);
        }

        private void OnBeReadDataSourceOperationCompleted(object arg)
        {
            if ((this.BeReadDataSourceCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.BeReadDataSourceCompleted(this, new BeReadDataSourceCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        public new void CancelAsync(object userState)
        {
            base.CancelAsync(userState);
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://ipower.org/")]
    public partial class WebPartData
    {

        private string titleField;

        private string urlField;

        /// <remarks/>
        public string Title
        {
            get
            {
                return this.titleField;
            }
            set
            {
                this.titleField = value;
            }
        }

        /// <remarks/>
        public string Url
        {
            get
            {
                return this.urlField;
            }
            set
            {
                this.urlField = value;
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    internal delegate void PendingDynamicTextDataCompletedEventHandler(object sender, PendingDynamicTextDataCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    internal partial class PendingDynamicTextDataCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal PendingDynamicTextDataCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    internal delegate void PendingDataSourceCompletedEventHandler(object sender, PendingDataSourceCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    internal partial class PendingDataSourceCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal PendingDataSourceCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public WebPartData[] Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((WebPartData[])(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    internal delegate void BeReadDynamicTextDataCompletedEventHandler(object sender, BeReadDynamicTextDataCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    internal partial class BeReadDynamicTextDataCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal BeReadDynamicTextDataCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    internal delegate void BeReadDataSourceCompletedEventHandler(object sender, BeReadDataSourceCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    internal partial class BeReadDataSourceCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal BeReadDataSourceCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public WebPartData[] Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((WebPartData[])(this.results[0]));
            }
        }
    }
}