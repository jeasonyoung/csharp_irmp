//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本:2.0.50727.5446
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.ComponentModel;
using System.Diagnostics;
using System.Web.Services;
using System.Web.Services.Protocols;
using System.Xml.Serialization;

// 
// 此源代码由 wsdl 自动生成, Version=2.0.50727.3038。
// 

namespace iPower.IRMP.SSOService.Poxy
{
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name = "单点登录身份认证。Soap", Namespace = "http://ipower.org/")]
    internal partial class AuthenticationProviderService : System.Web.Services.Protocols.SoapHttpClientProtocol
    {

        private System.Threading.SendOrPostCallback UserAuthorizationVerificationOperationCompleted;

        private System.Threading.SendOrPostCallback ChangePasswordOperationCompleted;

        /// <remarks/>
        public AuthenticationProviderService()
        {
            this.Url = "http://irmp.yaesoft.net/org/AuthenticationProviderService.asmx";
        }

        /// <remarks/>
        public event UserAuthorizationVerificationCompletedEventHandler UserAuthorizationVerificationCompleted;

        /// <remarks/>
        public event ChangePasswordCompletedEventHandler ChangePasswordCompleted;

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ipower.org/UserAuthorizationVerification", RequestNamespace = "http://ipower.org/", ResponseNamespace = "http://ipower.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public CallResult UserAuthorizationVerification(string userSign, string password, [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)] out UserInfo UserInfo)
        {
            object[] results = this.Invoke("UserAuthorizationVerification", new object[] {
                    userSign,
                    password});
            UserInfo = ((UserInfo)(results[1]));
            return ((CallResult)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginUserAuthorizationVerification(string userSign, string password, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("UserAuthorizationVerification", new object[] {
                    userSign,
                    password}, callback, asyncState);
        }

        /// <remarks/>
        public CallResult EndUserAuthorizationVerification(System.IAsyncResult asyncResult, out UserInfo UserInfo)
        {
            object[] results = this.EndInvoke(asyncResult);
            UserInfo = ((UserInfo)(results[1]));
            return ((CallResult)(results[0]));
        }

        /// <remarks/>
        public void UserAuthorizationVerificationAsync(string userSign, string password)
        {
            this.UserAuthorizationVerificationAsync(userSign, password, null);
        }

        /// <remarks/>
        public void UserAuthorizationVerificationAsync(string userSign, string password, object userState)
        {
            if ((this.UserAuthorizationVerificationOperationCompleted == null))
            {
                this.UserAuthorizationVerificationOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUserAuthorizationVerificationOperationCompleted);
            }
            this.InvokeAsync("UserAuthorizationVerification", new object[] {
                    userSign,
                    password}, this.UserAuthorizationVerificationOperationCompleted, userState);
        }

        private void OnUserAuthorizationVerificationOperationCompleted(object arg)
        {
            if ((this.UserAuthorizationVerificationCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UserAuthorizationVerificationCompleted(this, new UserAuthorizationVerificationCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ipower.org/ChangePassword", RequestNamespace = "http://ipower.org/", ResponseNamespace = "http://ipower.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public CallResult ChangePassword(string userSign, string oldPassword, string newPassword)
        {
            object[] results = this.Invoke("ChangePassword", new object[] {
                    userSign,
                    oldPassword,
                    newPassword});
            return ((CallResult)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginChangePassword(string userSign, string oldPassword, string newPassword, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("ChangePassword", new object[] {
                    userSign,
                    oldPassword,
                    newPassword}, callback, asyncState);
        }

        /// <remarks/>
        public CallResult EndChangePassword(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((CallResult)(results[0]));
        }

        /// <remarks/>
        public void ChangePasswordAsync(string userSign, string oldPassword, string newPassword)
        {
            this.ChangePasswordAsync(userSign, oldPassword, newPassword, null);
        }

        /// <remarks/>
        public void ChangePasswordAsync(string userSign, string oldPassword, string newPassword, object userState)
        {
            if ((this.ChangePasswordOperationCompleted == null))
            {
                this.ChangePasswordOperationCompleted = new System.Threading.SendOrPostCallback(this.OnChangePasswordOperationCompleted);
            }
            this.InvokeAsync("ChangePassword", new object[] {
                    userSign,
                    oldPassword,
                    newPassword}, this.ChangePasswordOperationCompleted, userState);
        }

        private void OnChangePasswordOperationCompleted(object arg)
        {
            if ((this.ChangePasswordCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ChangePasswordCompleted(this, new ChangePasswordCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        public new void CancelAsync(object userState)
        {
            base.CancelAsync(userState);
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://ipower.org/")]
    public partial class CallResult
    {

        private int resultCodeField;

        private string resultMessageField;

        /// <remarks/>
        public int ResultCode
        {
            get
            {
                return this.resultCodeField;
            }
            set
            {
                this.resultCodeField = value;
            }
        }

        /// <remarks/>
        public string ResultMessage
        {
            get
            {
                return this.resultMessageField;
            }
            set
            {
                this.resultMessageField = value;
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://ipower.org/")]
    public partial class UserInfo
    {

        private string currentUserIDField;

        private string currentUserNameField;

        /// <remarks/>
        public string CurrentUserID
        {
            get
            {
                return this.currentUserIDField;
            }
            set
            {
                this.currentUserIDField = value;
            }
        }

        /// <remarks/>
        public string CurrentUserName
        {
            get
            {
                return this.currentUserNameField;
            }
            set
            {
                this.currentUserNameField = value;
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    internal delegate void UserAuthorizationVerificationCompletedEventHandler(object sender, UserAuthorizationVerificationCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    internal partial class UserAuthorizationVerificationCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal UserAuthorizationVerificationCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public CallResult Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((CallResult)(this.results[0]));
            }
        }

        /// <remarks/>
        public UserInfo UserInfo
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((UserInfo)(this.results[1]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    internal delegate void ChangePasswordCompletedEventHandler(object sender, ChangePasswordCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    internal partial class ChangePasswordCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal ChangePasswordCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public CallResult Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((CallResult)(this.results[0]));
            }
        }
    }
}
