//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本:2.0.50727.5446
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.ComponentModel;
using System.Diagnostics;
using System.Web.Services;
using System.Web.Services.Protocols;
using System.Xml.Serialization;

// 
// 此源代码由 wsdl 自动生成, Version=2.0.50727.3038。
// 
namespace iPower.IRMP.SSOService.Poxy
{

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name = "验证授权服务。Soap", Namespace = "http://ipower.org/")]
    internal partial class AuthorizedToVerifyProviderService : System.Web.Services.Protocols.SoapHttpClientProtocol
    {

        private System.Threading.SendOrPostCallback AppAuthorizationOperationCompleted;

        private System.Threading.SendOrPostCallback UserAuthorizationVerificationOperationCompleted;

        /// <remarks/>
        public AuthorizedToVerifyProviderService()
        {
            this.Url = "http://irmp.yaesoft.net/sys/AuthorizedToVerifyProviderService.asmx";
        }

        /// <remarks/>
        public event AppAuthorizationCompletedEventHandler AppAuthorizationCompleted;

        /// <remarks/>
        public event UserAuthorizationVerificationCompletedEventHandler UserAuthorizationVerificationCompleted;

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ipower.org/AppAuthorization", RequestNamespace = "http://ipower.org/", ResponseNamespace = "http://ipower.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public CallResult AppAuthorization(string systemID, string authPassword)
        {
            object[] results = this.Invoke("AppAuthorization", new object[] {
                    systemID,
                    authPassword});
            return ((CallResult)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginAppAuthorization(string systemID, string authPassword, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("AppAuthorization", new object[] {
                    systemID,
                    authPassword}, callback, asyncState);
        }

        /// <remarks/>
        public CallResult EndAppAuthorization(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((CallResult)(results[0]));
        }

        /// <remarks/>
        public void AppAuthorizationAsync(string systemID, string authPassword)
        {
            this.AppAuthorizationAsync(systemID, authPassword, null);
        }

        /// <remarks/>
        public void AppAuthorizationAsync(string systemID, string authPassword, object userState)
        {
            if ((this.AppAuthorizationOperationCompleted == null))
            {
                this.AppAuthorizationOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAppAuthorizationOperationCompleted);
            }
            this.InvokeAsync("AppAuthorization", new object[] {
                    systemID,
                    authPassword}, this.AppAuthorizationOperationCompleted, userState);
        }

        private void OnAppAuthorizationOperationCompleted(object arg)
        {
            if ((this.AppAuthorizationCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AppAuthorizationCompleted(this, new AppAuthorizationCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ipower.org/UserAuthorizationVerification", RequestNamespace = "http://ipower.org/", ResponseNamespace = "http://ipower.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public CallResult UserAuthorizationVerification(string employeeID, string systemID, string clientIP)
        {
            object[] results = this.Invoke("UserAuthorizationVerification", new object[] {
                    employeeID,
                    systemID,
                    clientIP});
            return ((CallResult)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginUserAuthorizationVerification(string employeeID, string systemID, string clientIP, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("UserAuthorizationVerification", new object[] {
                    employeeID,
                    systemID,
                    clientIP}, callback, asyncState);
        }

        /// <remarks/>
        public CallResult EndUserAuthorizationVerification(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((CallResult)(results[0]));
        }

        /// <remarks/>
        public void UserAuthorizationVerificationAsync(string employeeID, string systemID, string clientIP)
        {
            this.UserAuthorizationVerificationAsync(employeeID, systemID, clientIP, null);
        }

        /// <remarks/>
        public void UserAuthorizationVerificationAsync(string employeeID, string systemID, string clientIP, object userState)
        {
            if ((this.UserAuthorizationVerificationOperationCompleted == null))
            {
                this.UserAuthorizationVerificationOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUserAuthorizationVerificationOperationCompleted);
            }
            this.InvokeAsync("UserAuthorizationVerification", new object[] {
                    employeeID,
                    systemID,
                    clientIP}, this.UserAuthorizationVerificationOperationCompleted, userState);
        }

        private void OnUserAuthorizationVerificationOperationCompleted(object arg)
        {
            if ((this.UserAuthorizationVerificationCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UserAuthorizationVerificationCompleted(this, new UserAuthorizationVerificationCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        public new void CancelAsync(object userState)
        {
            base.CancelAsync(userState);
        }
    }

    /// <remarks/>
    //[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    //[System.SerializableAttribute()]
    //[System.Diagnostics.DebuggerStepThroughAttribute()]
    //[System.ComponentModel.DesignerCategoryAttribute("code")]
    //[System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://ipower.org/")]
    //public partial class CallResult
    //{

    //    private int resultCodeField;

    //    private string resultMessageField;

    //    /// <remarks/>
    //    public int ResultCode
    //    {
    //        get
    //        {
    //            return this.resultCodeField;
    //        }
    //        set
    //        {
    //            this.resultCodeField = value;
    //        }
    //    }

    //    /// <remarks/>
    //    public string ResultMessage
    //    {
    //        get
    //        {
    //            return this.resultMessageField;
    //        }
    //        set
    //        {
    //            this.resultMessageField = value;
    //        }
    //    }
    //}

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    internal delegate void AppAuthorizationCompletedEventHandler(object sender, AppAuthorizationCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    internal partial class AppAuthorizationCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal AppAuthorizationCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public CallResult Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((CallResult)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    //[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    //public delegate void UserAuthorizationVerificationCompletedEventHandler(object sender, UserAuthorizationVerificationCompletedEventArgs e);

    /// <remarks/>
    //[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    //[System.Diagnostics.DebuggerStepThroughAttribute()]
    //[System.ComponentModel.DesignerCategoryAttribute("code")]
    //public partial class UserAuthorizationVerificationCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    //{

    //    private object[] results;

    //    internal UserAuthorizationVerificationCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
    //        base(exception, cancelled, userState)
    //    {
    //        this.results = results;
    //    }

    //    /// <remarks/>
    //    public CallResult Result
    //    {
    //        get
    //        {
    //            this.RaiseExceptionIfNecessary();
    //            return ((CallResult)(this.results[0]));
    //        }
    //    }
    //}
}