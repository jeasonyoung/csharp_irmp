//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本:2.0.50727.5446
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.ComponentModel;
using System.Diagnostics;
using System.Web.Services;
using System.Web.Services.Protocols;
using System.Xml.Serialization;

// 
// 此源代码由 wsdl 自动生成, Version=2.0.50727.3038。
// 

namespace iPower.IRMP.SSOService.Poxy
{
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name = "提供单点登录票据存储。Soap", Namespace = "http://ipower.org/")]
    internal partial class SSOTicketDbProviderService : System.Web.Services.Protocols.SoapHttpClientProtocol
    {

        private System.Threading.SendOrPostCallback CreateTicketOperationCompleted;

        private System.Threading.SendOrPostCallback TicketVerificationOperationCompleted;

        private System.Threading.SendOrPostCallback DestroyTicketOperationCompleted;

        /// <remarks/>
        public SSOTicketDbProviderService()
        {
            this.Url = "http://irmp.yaesoft.net/SSOTicketDbProviderService.asmx";
        }

        /// <remarks/>
        public event CreateTicketCompletedEventHandler CreateTicketCompleted;

        /// <remarks/>
        public event TicketVerificationCompletedEventHandler TicketVerificationCompleted;

        /// <remarks/>
        public event DestroyTicketCompletedEventHandler DestroyTicketCompleted;

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ipower.org/CreateTicket", RequestNamespace = "http://ipower.org/", ResponseNamespace = "http://ipower.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public CallResult CreateTicket(string ticket, string clientIP)
        {
            object[] results = this.Invoke("CreateTicket", new object[] {
                    ticket,
                    clientIP});
            return ((CallResult)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginCreateTicket(string ticket, string clientIP, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("CreateTicket", new object[] {
                    ticket,
                    clientIP}, callback, asyncState);
        }

        /// <remarks/>
        public CallResult EndCreateTicket(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((CallResult)(results[0]));
        }

        /// <remarks/>
        public void CreateTicketAsync(string ticket, string clientIP)
        {
            this.CreateTicketAsync(ticket, clientIP, null);
        }

        /// <remarks/>
        public void CreateTicketAsync(string ticket, string clientIP, object userState)
        {
            if ((this.CreateTicketOperationCompleted == null))
            {
                this.CreateTicketOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCreateTicketOperationCompleted);
            }
            this.InvokeAsync("CreateTicket", new object[] {
                    ticket,
                    clientIP}, this.CreateTicketOperationCompleted, userState);
        }

        private void OnCreateTicketOperationCompleted(object arg)
        {
            if ((this.CreateTicketCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CreateTicketCompleted(this, new CreateTicketCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ipower.org/TicketVerification", RequestNamespace = "http://ipower.org/", ResponseNamespace = "http://ipower.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public SSOCallResult TicketVerification(string ticket, string clientIP)
        {
            object[] results = this.Invoke("TicketVerification", new object[] {
                    ticket,
                    clientIP});
            return ((SSOCallResult)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginTicketVerification(string ticket, string clientIP, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("TicketVerification", new object[] {
                    ticket,
                    clientIP}, callback, asyncState);
        }

        /// <remarks/>
        public SSOCallResult EndTicketVerification(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((SSOCallResult)(results[0]));
        }

        /// <remarks/>
        public void TicketVerificationAsync(string ticket, string clientIP)
        {
            this.TicketVerificationAsync(ticket, clientIP, null);
        }

        /// <remarks/>
        public void TicketVerificationAsync(string ticket, string clientIP, object userState)
        {
            if ((this.TicketVerificationOperationCompleted == null))
            {
                this.TicketVerificationOperationCompleted = new System.Threading.SendOrPostCallback(this.OnTicketVerificationOperationCompleted);
            }
            this.InvokeAsync("TicketVerification", new object[] {
                    ticket,
                    clientIP}, this.TicketVerificationOperationCompleted, userState);
        }

        private void OnTicketVerificationOperationCompleted(object arg)
        {
            if ((this.TicketVerificationCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.TicketVerificationCompleted(this, new TicketVerificationCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ipower.org/DestroyTicket", RequestNamespace = "http://ipower.org/", ResponseNamespace = "http://ipower.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public SSOCallResult DestroyTicket(string ticket, string clientIP)
        {
            object[] results = this.Invoke("DestroyTicket", new object[] {
                    ticket,
                    clientIP});
            return ((SSOCallResult)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginDestroyTicket(string ticket, string clientIP, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("DestroyTicket", new object[] {
                    ticket,
                    clientIP}, callback, asyncState);
        }

        /// <remarks/>
        public SSOCallResult EndDestroyTicket(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((SSOCallResult)(results[0]));
        }

        /// <remarks/>
        public void DestroyTicketAsync(string ticket, string clientIP)
        {
            this.DestroyTicketAsync(ticket, clientIP, null);
        }

        /// <remarks/>
        public void DestroyTicketAsync(string ticket, string clientIP, object userState)
        {
            if ((this.DestroyTicketOperationCompleted == null))
            {
                this.DestroyTicketOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDestroyTicketOperationCompleted);
            }
            this.InvokeAsync("DestroyTicket", new object[] {
                    ticket,
                    clientIP}, this.DestroyTicketOperationCompleted, userState);
        }

        private void OnDestroyTicketOperationCompleted(object arg)
        {
            if ((this.DestroyTicketCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DestroyTicketCompleted(this, new DestroyTicketCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        public new void CancelAsync(object userState)
        {
            base.CancelAsync(userState);
        }
    }

    /// <remarks/>
    //[System.Xml.Serialization.XmlIncludeAttribute(typeof(SSOCallResult))]
    //[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    //[System.SerializableAttribute()]
    //[System.Diagnostics.DebuggerStepThroughAttribute()]
    //[System.ComponentModel.DesignerCategoryAttribute("code")]
    //[System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://ipower.org/")]
    //public partial class CallResult
    //{

    //    private int resultCodeField;

    //    private string resultMessageField;

    //    /// <remarks/>
    //    public int ResultCode
    //    {
    //        get
    //        {
    //            return this.resultCodeField;
    //        }
    //        set
    //        {
    //            this.resultCodeField = value;
    //        }
    //    }

    //    /// <remarks/>
    //    public string ResultMessage
    //    {
    //        get
    //        {
    //            return this.resultMessageField;
    //        }
    //        set
    //        {
    //            this.resultMessageField = value;
    //        }
    //    }
    //}

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://ipower.org/")]
    public partial class SSOCallResult : CallResult
    {

        private string ticketField;

        /// <remarks/>
        public string Ticket
        {
            get
            {
                return this.ticketField;
            }
            set
            {
                this.ticketField = value;
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    internal delegate void CreateTicketCompletedEventHandler(object sender, CreateTicketCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    internal partial class CreateTicketCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal CreateTicketCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public CallResult Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((CallResult)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    internal delegate void TicketVerificationCompletedEventHandler(object sender, TicketVerificationCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    internal partial class TicketVerificationCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal TicketVerificationCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public SSOCallResult Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((SSOCallResult)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    internal delegate void DestroyTicketCompletedEventHandler(object sender, DestroyTicketCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    internal partial class DestroyTicketCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal DestroyTicketCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public SSOCallResult Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((SSOCallResult)(this.results[0]));
            }
        }
    }
}