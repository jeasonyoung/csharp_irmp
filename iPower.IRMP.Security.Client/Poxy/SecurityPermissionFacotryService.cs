//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本:2.0.50727.5446
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.ComponentModel;
using System.Diagnostics;
using System.Web.Services;
using System.Web.Services.Protocols;
using System.Xml.Serialization;

// 
// 此源代码由 wsdl 自动生成, Version=2.0.50727.3038。
// 
namespace iPower.IRMP.Security.Client.Poxy
{
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name = "SecurityPermissionFacotryServiceSoap", Namespace = "http://ipower.org/")]
    internal partial class SecurityPermissionFacotryService : System.Web.Services.Protocols.SoapHttpClientProtocol
    {

        private System.Threading.SendOrPostCallback ModulePermissionsOperationCompleted;

        /// <remarks/>
        public SecurityPermissionFacotryService()
        {
            this.Url = "http://irmp.yaesoft.net/security/SecurityPermissionFacotryService.asmx";
        }

        /// <remarks/>
        public event ModulePermissionsCompletedEventHandler ModulePermissionsCompleted;

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ipower.org/ModulePermissions", RequestNamespace = "http://ipower.org/", ResponseNamespace = "http://ipower.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public SecurityPermission[] ModulePermissions(string systemID, string moduleID, string employeeID)
        {
            object[] results = this.Invoke("ModulePermissions", new object[] {
                    systemID,
                    moduleID,
                    employeeID});
            return ((SecurityPermission[])(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginModulePermissions(string systemID, string moduleID, string employeeID, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("ModulePermissions", new object[] {
                    systemID,
                    moduleID,
                    employeeID}, callback, asyncState);
        }

        /// <remarks/>
        public SecurityPermission[] EndModulePermissions(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((SecurityPermission[])(results[0]));
        }

        /// <remarks/>
        public void ModulePermissionsAsync(string systemID, string moduleID, string employeeID)
        {
            this.ModulePermissionsAsync(systemID, moduleID, employeeID, null);
        }

        /// <remarks/>
        public void ModulePermissionsAsync(string systemID, string moduleID, string employeeID, object userState)
        {
            if ((this.ModulePermissionsOperationCompleted == null))
            {
                this.ModulePermissionsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnModulePermissionsOperationCompleted);
            }
            this.InvokeAsync("ModulePermissions", new object[] {
                    systemID,
                    moduleID,
                    employeeID}, this.ModulePermissionsOperationCompleted, userState);
        }

        private void OnModulePermissionsOperationCompleted(object arg)
        {
            if ((this.ModulePermissionsCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ModulePermissionsCompleted(this, new ModulePermissionsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        public new void CancelAsync(object userState)
        {
            base.CancelAsync(userState);
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://ipower.org/")]
    public partial class SecurityPermission
    {

        private string permissionIDField;

        private string permissionNameField;

        /// <remarks/>
        public string PermissionID
        {
            get
            {
                return this.permissionIDField;
            }
            set
            {
                this.permissionIDField = value;
            }
        }

        /// <remarks/>
        public string PermissionName
        {
            get
            {
                return this.permissionNameField;
            }
            set
            {
                this.permissionNameField = value;
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    internal delegate void ModulePermissionsCompletedEventHandler(object sender, ModulePermissionsCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    internal partial class ModulePermissionsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal ModulePermissionsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public SecurityPermission[] Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((SecurityPermission[])(this.results[0]));
            }
        }
    }
}
